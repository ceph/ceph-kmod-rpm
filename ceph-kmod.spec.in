# If kversion isn't defined on the rpmbuild line, define it here.
%{!?kversion: %define kversion 3.10.0-123.9.3.el7}

Name:    ceph-kmod
Version: @rpm_version@
Release: @rpm_release@%{?dist}
Group:   System Environment/Kernel
License: GPLv2
Summary: ceph kernel modules
URL:     http://www.ceph.com/

BuildRequires: redhat-rpm-config

# Sources.
Source0:  @tarball_file@
Source10: libceph-kmodtool-filelist.txt
Source11: libceph-kmodtool-el7.sh
Source12: ceph-kmodtool-filelist.txt
Source13: ceph-kmodtool-el7.sh
Source14: rbd-kmodtool-filelist.txt
Source15: rbd-kmodtool-el7.sh

# kmodtool magic for libceph here.
%{expand:%( \
  override_filelist=%{SOURCE10} \
  sh %{SOURCE11} rpmtemplate libceph %{kversion} "" \
)}

# kmodtool magic for ceph here.
%{expand:%( \
  override_filelist=%{SOURCE12} \
  sh %{SOURCE13} rpmtemplate ceph    %{kversion} "" \
)}

# kmodtool magic for rbd here.
%{expand:%( \
  override_filelist=%{SOURCE14} \
  sh %{SOURCE15} rpmtemplate rbd     %{kversion} "" \
)}


# Disable the building of the debug package(s).
%define debug_package %{nil}

%description
This package provides the ceph kernel module(s).
It is built to depend upon the specific ABI provided by a range of releases
of the same variant of the Linux kernel and not on any one specific build.

%prep
%setup -q -n @tarball_dir@
for kmod_name in libceph ceph rbd; do
  echo "override ${kmod_name} * weak-updates/${kmod_name}" \
    > kmod-${kmod_name}.conf
done

# Red Hat ships old headers at include/linux/ceph. Make a copy of the directory
# in /usr/src/kernels/ and delete the old headers from our copy. We will build
# against this copy.
mkdir kernels
cp -r %{_usrsrc}/kernels/%{kversion}.%{_target_cpu} kernels/
pushd kernels/%{kversion}.%{_target_cpu}
  rm -r include/linux/ceph
  rm -r include/linux/crush
popd


%build
KSRC=${PWD}/kernels/%{kversion}.%{_target_cpu}

# build libceph
export CONFIG_CEPH_LIB=m
%{__make} -C ${KSRC} %{?_smp_mflags} modules M=$PWD/net/ceph/ \
  KCPPFLAGS="-I${PWD}/include" V=1

# Verify that the libceph symbols are available. If they are not, we'll have
# warnings during the ceph and rbd builds, but the warnings will not be fatal.
# We need to bail quickly if we don't have the symbols at this point.
[[ -f net/ceph/Module.symvers ]] || exit 1

# build cephfs (ceph.ko)
export CONFIG_CEPH_FS=m
%{__make} -C ${KSRC} %{?_smp_mflags} modules M=$PWD/fs/ceph/ \
  KBUILD_EXTRA_SYMBOLS=$PWD/net/ceph/Module.symvers \
  KCPPFLAGS="-I${PWD}/include" V=1

# build rbd
export CONFIG_BLK_DEV_RBD=m
%{__make} -C ${KSRC} %{?_smp_mflags} modules M=$PWD/drivers/block \
  KBUILD_EXTRA_SYMBOLS=$PWD/net/ceph/Module.symvers \
  KCPPFLAGS="-I${PWD}/include" V=1

%install
# libceph
export CONFIG_CEPH_LIB=m
# cephfs
export CONFIG_CEPH_FS=m
# rbd
export CONFIG_BLK_DEV_RBD=m
export INSTALL_MOD_PATH=%{buildroot}

# This function installs a kernel module from a certain directory
# Arguments:
#    - module name
#    - module source code location
install_module() {
  if [ -z "$1" ]; then
    echo "Error: specify a kernel module name"
    exit 1
  fi
  kmod_name=$1

  if [ -z "$2" ]; then
    echo "Error: specify a kernel module source directory"
    exit 1
  fi
  kmod_source=$2

  export INSTALL_MOD_DIR=extra/${kmod_name}
  KSRC=%{_usrsrc}/kernels/%{kversion}.%{_target_cpu}
  %{__make} -C "${KSRC}" modules_install M=${kmod_source}
  %{__install} -d %{buildroot}%{_sysconfdir}/depmod.d/
  %{__install} -m0644 kmod-${kmod_name}.conf %{buildroot}%{_sysconfdir}/depmod.d/
  %{__install} -d %{buildroot}%{_defaultdocdir}/kmod-${kmod_name}-%{version}/
  # License file
  %{__install} -m0644 COPYING %{buildroot}%{_defaultdocdir}/kmod-${kmod_name}-%{version}/COPYING

}

install_module libceph $PWD/net/ceph
install_module ceph    $PWD/fs/ceph
install_module rbd     $PWD/drivers/block

# Set the modules to be executable, so that it will be stripped when packaged.
find %{buildroot} -type f -name \*.ko -exec %{__chmod} u+x \{\} \;
# Remove unnecessary files.
%{__rm} -f %{buildroot}/lib/modules/%{kversion}.%{_target_cpu}/modules.*

%changelog
